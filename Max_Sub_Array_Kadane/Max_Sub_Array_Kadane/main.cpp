//
//  main.cpp
//  Max_Sub_Array_Kadane
//
//  Created by Himanshu Ahuja on 16/07/16.
//  Copyright Â© 2016 Himanshu Ahuja. All rights reserved.
//
/*
 //////////This is the Kaden's Algorithm for Maximum Sub Array//////////
it makes the assumption that there should be atleast one positive element in the whole of the array. So we can safely initialize sum to zero that is the sum of the empty array.
 */
#include <iostream>
#include <vector>

using namespace::std;

struct subArray{
    unsigned long left, right;
    int sum;
};

subArray KadenMax (vector<int> A)
{
    subArray currResult = {0, 0, 0}, maxResult = {0,0,0};
    
    for( unsigned long i = 0; i <= A.size() - 1; i++)
    {
        if (currResult.sum + A[i] > 0){
            currResult.sum = currResult.sum + A[i];
            currResult.right = i;
        }
        else
        {
            currResult.sum = 0 ;
            currResult.left = i + 1;
        }
        
        if (currResult.sum > maxResult.sum)
            maxResult = currResult;
    }
    return maxResult;
}

int main() {
    clock_t start = clock();
    //vector <int> A ={13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7};
    vector <int> test = {98,96,60,49,20,-44,-13,-98,-10,58,-62,-25,49,81,-84,13,-70,90,-73,90,8,-37,31,93,12,-25,41,25,0,84,3,-54,43,-98,53,-90,-69,-81,-35,77,35,20,14,77,13,84,-26,-53,-43,-97,-6,-42,-91,-33,91,18,-28,65,-21,50,71,-67,95,-61,-90,-63,-32,61,-72,-17,62,-43,65,-19,92,1,-85,59,-96,42,-75,21,-37,-29,91,19,-78,-61,86,17,62,-82,-53,33,-33,13,-67,87,51,-50,8,-68,41,99,-23,-39,13,3,70,90,-2,-4,-100,26,76,9,32,-47,-6,64,88,73,-9,66,11,-4,33,49,-72,-39,-68,-78,-66,64,89,-19,54,92,-79,72,-54,53,-78,-74,63,78,32,-16,-36,64,67,-96,83,-2,21,31,85,-43,4,-86,-14,9,22,-92,-36,-38,66,-86,-41,79,-87,-42,90,58,74,-25,-41,-32,100,52,56,-21,-31,17,-51,-13,5,53,76,-31,0,-82,-21,-16,-26,-13,15,2,-55,26,31,15,-83,31,-44,55,-93,-49,51,11,30,91,-14,-69,-7,-18,-81,10,49,-72,28,44,-5,71,-46,-87,-6,-7,-8,-57,-32,34,42,16,-15,-97,-66,57,-68,59,-17,91,57,-63,-71,82,-34,-33,38,89,74,26,-44,8,82,41,-16,-71,-100,-86,33,25,-55,-77,99,30,45,90,-87,-58,50,-21,-94,78,20,-93,-72,-1,-6,39,85,5,-77,95,52,-63,-57,-26,-66,55,40,-41,18,5,-83,-69,-100,68,-26,-28,15,-72,-58,90,-6,-68,49,-20,-82,-62,68,-27,3,-6,-91,18,20,-83,42,-69,23,-24,-26,25,61,34,22,5,-76,86,53,-53,-75,89,63,-64,98,69,91,-65,-36,-25,-10,-16,17,-15,1,43,-23,63,32,-33,-70,-10,-50,-81,9,30,80,61,36,39,0,31,100,64,47,-76,70,-77,-83,39,-51,-78,-69,-54,-89,25,-31,56,96,44,73,-15,-51,-24,-19,-98,81,3,73,-23,79,-17,-83,38,-12,52,66,14,23,-4,-54,84,82,-82,-2,74,-74,-39,-51,78,14,18,44,87,52,-53,93,-50,-24,44,-93,10,0,-14,-57,-33,95,96,-53,-49,-56,-28,-1,-25,-4,94,-21,57,-87,-49,43,92,-51,-66,12,6,-66,-33,28,97,-47,-43,59,46,-84,84,51,-46,-15,-51,-61,-99,71,51,42,53,-94,17,55,-65,63,27,-59,-1,93,70,-51,-36,41,3,-100,8,-2,-87,-31,92,91,-18,-26,-40,10,21,-33,-12,-57,82,34,-84,84,88,-34,-79,-10,-90,52,-35,-13,7,77,-43,-38,26,-17,-65,47,95,9,-13,96,74,56,8,-36,-51,99,7,36,-70,92,-86,50,-29,10,90,-69,-9,43,-33,32,-99,-87,53,-4,27,-55,38,-14,88,-70,-71,52,-7,66,67,31,6,-98,-95,21,53,67,51,41,-47,-11,23,29,42,-22,-12,91,24,-75,-77,-96,-50,-74,14,22,-45,78,61,-76,-18,23,-58,33,80,-5,20,-12,-95,61,-93,92,5,97,82,-48,-30,23,25,61,91,-62,59,35,-35,-28,-2,-11,-65,97,18,-14,-18,43,44,51,-15,44,15,77,-35,13,33,72,38,-54,-86,-61,5,-12,-42,-16,-11,18,-65,37,64,-70,-54,71,-74,-42,29,27,25,-92,79,28,35,-87,54,-80,-21,-1,-97,-99,12,16,82,24,-22,-49,-3,-94,9,79,29,-59,80,60,-39,24,-34,55,-68,-95,-89,55,27,-29,-21,39,25,92,-59,14,-8,-67,-31,9,-23,-48,26,40,66,60,-13,-55,24,67,-61,72,-62,86,6,-83,-16,-31,16,85,78,-84,30,-12,-72,60,-7,-25,-33,-96,9,81,-78,49,66,99,-3,69,-2,-94,-39,82,94,34,-60,81,-69,-91,-56,-35,54,-94,81,-68,-60,19,100,3,61,15,81,83,26,55,54,99,-23,62,-24,-50,27,20,100,-1,-81,-15,6,-46,-57,-42,85,-96,-70,55,-79,91,71,-15,-31,-90,87,-45,-71,-5,91,-36,95,47,8,74,0,-62,77,-41,-26,-14,37,-81,81,83,26,-69,-66,5,86,-21,72,61,76,4,-25,-49,-65,89,-55,-100,24,-73,31,69,-52,37,-24,-70,-70,-25,7,86,31,-84,-52,-2,46,-64,46,19,-4,-35,-100,8,89,-65,11,-93,22,-97,-26,14,77,47,-62,58,-75,77,95,-15,-26,-87,-44,77,-35,9,-41,13,95,83,52,-72,-40,93,42,-36,71,-12,-72,88,20,51,56,-60,-81,-78,44,68,96,-40,38,68,98,-62,24,-15,-31,72,-94,5,-71,-34,-76,-29,-68,10,-95,16,10,43,31,-85,-81,-57,-82,-95,-15,34,31,-94,19,100,-49,-1,38,-7,-100,-26,41,16,1,92,-41,-62,51,52,34,-71,-55,73,9,24,88,25,66,-100,-6,-91,-5,6,5,79,58,-22,27,78,85,-30,81,21,-61,55,-50,59,-32,85,-20,-91,-78,84,18,-18,95,100,25,-13,-91,67,82,-58,70,-32,-75,57,52,28,54,-5,61,88,77,-4,-54,-30,11,60,84,-17,25};
    subArray final = KadenMax(test);
    clock_t stop = clock();
    cout<<"Maximum sum is: "<<final.sum<<"\n";
    for(unsigned long i = final.left; i<=final.right; i++){
        cout<<test[i]<<" ";
    }
    double elapsed = (double)(stop - start) * 1000.0 / CLOCKS_PER_SEC;
    printf("\nTime elapsed in ms: %f \n", elapsed);
    return 0;
    
}
